-- Q.1 Retrive the total number of orders place

SELECT 
    COUNT(ORDER_ID)
FROM
    ORDERS;

-- Q.2 Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS REVENUE
FROM
    order_details
        JOIN
    pizzas ON order_details.PIZZA_ID = pizzas.pizza_id;
    
-- Q.3 Identify the highest-priced pizza.

SELECT 
    pizza_types.name, PIZZAS.price
FROM
    pizza_types
        INNER JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY PIZZAS.price DESC
LIMIT 1;

-- Q.4 Identify the most common pizza size ordered.

SELECT pizzas.size, COUNT(order_details.ORDER_DETAILS_ID) AS ORDER_COUNT
FROM PIZZAS INNER JOIN ORDER_DETAILS
ON PIZZAS.PIZZA_ID = order_details.PIZZA_ID
GROUP BY pizzas.size 
ORDER BY ORDER_COUNT DESC LIMIT 1;

-- Q.5 List the top 5 most ordered pizza types along with their quantities.

SELECT 
    PIZZA_TYPES.NAME,
    SUM(ORDER_DETAILS.QUANTITY) AS TOTAL_QUANTITIES_ORDERED
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.NAME
ORDER BY TOTAL_QUANTITIES_ORDERED DESC
LIMIT 5;

-- Q.6 Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    PIZZA_TYPES.CATEGORY, SUM(ORDER_DETAILS.QUANTITY)
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_TYPES.CATEGORY;

-- Q.7 Determine the distribution of orders by hour of the day.

SELECT 
    HOUR(ORDER_TIME) AS HOUR, COUNT(ORDER_ID) AS COUNT_OF_ORDERS
FROM
    ORDERS
GROUP BY HOUR; 

-- Q.8 Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
    CATEGORY, COUNT(NAME) AS NUMBER_OF_PIZZA
FROM
    PIZZA_TYPES
GROUP BY CATEGORY;

-- Q.9 Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    ROUND(AVG(QTY), 0) AS AVG_NUMBER_OF_PIZZAS
FROM
    (SELECT 
        ORDERS.ORDER_DATE AS D, SUM(ORDER_DETAILS.QUANTITY) AS QTY
    FROM
        ORDERS
    JOIN ORDER_DETAILS ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
    GROUP BY D) AS S;
    
-- Q.10 Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    PIZZA_TYPES.NAME AS PIZZA_NAME,
    SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY PIZZA_NAME
ORDER BY REVENUE DESC
LIMIT 3;

-- Q.11 Calculate the percentage contribution of each pizza type to total revenue.

SELECT * FROM PIZZA_TYPES;

SELECT 
    PIZZA_TYPES.CATEGORY AS CAT,
    ROUND(SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) / (SELECT 
                    ROUND(SUM(order_details.quantity * pizzas.price),
                                2) AS REVENUE
                FROM
                    order_details
                        JOIN
                    pizzas ON order_details.PIZZA_ID = pizzas.pizza_id) * 100,
            2) AS REVENUE
FROM
    PIZZA_TYPES
        JOIN
    PIZZAS ON PIZZA_TYPES.PIZZA_TYPE_ID = PIZZAS.PIZZA_TYPE_ID
        JOIN
    ORDER_DETAILS ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
GROUP BY CAT;

-- Q.12 Analyze the cumulative revenue generated over time.
SELECT * FROM ORDER_DETAILS;

SELECT ORD_DATE, 
SUM(REVENUE) OVER(ORDER BY ORD_DATE) AS CUMM_REVENUE FROM
(SELECT ORDERS.ORDER_DATE AS ORD_DATE, 
SUM(ORDER_DETAILS.QUANTITY * PIZZAS.PRICE) AS REVENUE
FROM ORDER_DETAILS JOIN PIZZAS
ON ORDER_DETAILS.PIZZA_ID = PIZZAS.PIZZA_ID
JOIN ORDERS 
ON ORDERS.ORDER_ID = ORDER_DETAILS.ORDER_ID
GROUP BY ORD_DATE) AS SALES;